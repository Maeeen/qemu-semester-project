From 1536c40616c227e13dabcbea7ebc5575ca6351c5 Mon Sep 17 00:00:00 2001
From: Marwan Azuz <marwanazuz+cinnabyte@gmail.com>
Date: Mon, 18 Nov 2024 12:07:04 +0100
Subject: [PATCH] Expose a prefetch API

---
 accel/tcg/cpu-exec.c         | 46 ++++++++++++++++++++++++++++++++++++
 include/exec/cpu-common.h    |  2 ++
 include/qemu/qemu-plugin.h   | 11 +++++++++
 plugins/api.c                |  7 ++++++
 plugins/qemu-plugins.symbols |  1 +
 5 files changed, 67 insertions(+)

diff --git a/accel/tcg/cpu-exec.c b/accel/tcg/cpu-exec.c
index 8163295f34..eff3eca231 100644
--- a/accel/tcg/cpu-exec.c
+++ b/accel/tcg/cpu-exec.c
@@ -1102,3 +1102,49 @@ void tcg_exec_unrealizefn(CPUState *cpu)
     tlb_destroy(cpu);
     g_free_rcu(cpu->tb_jmp_cache, rcu);
 }
+
+int cpu_prefetch_tb(CPUState *cpu, vaddr pc) {
+    TranslationBlock *tb;
+    vaddr _unused;
+    uint64_t cs_base;
+    uint32_t flags, cflags;
+
+    cpu_get_tb_cpu_state(cpu_env(cpu), &_unused, &cs_base, &flags);
+
+    /*
+        * When requested, use an exact setting for cflags for the next
+        * execution.  This is used for icount, precise smc, and stop-
+        * after-access watchpoints.  Since this request should never
+        * have CF_INVALID set, -1 is a convenient invalid value that
+        * does not require tcg headers for cpu_common_reset.
+        */
+    cflags = cpu->cflags_next_tb;
+    if (cflags == -1) {
+        cflags = curr_cflags(cpu);
+    } else {
+        cpu->cflags_next_tb = -1;
+    }
+    
+    tb = tb_lookup(cpu, pc, cs_base, flags, cflags);
+    if (tb == NULL) {
+        uint32_t h;
+        CPUJumpCache *jc;
+
+
+        mmap_lock();
+        tb = tb_gen_code(cpu, pc, cs_base, flags, cflags);
+        mmap_unlock();
+
+        printf("Pre-translated TB at %p\n", tb->tc.ptr);
+        /*
+            * We add the TB in the virtual pc hash table
+            * for the fast lookup
+            */
+        h = tb_jmp_cache_hash_func(pc);
+        jc = cpu->tb_jmp_cache;
+        jc->array[h].pc = pc;
+        qatomic_set(&jc->array[h].tb, tb);
+        return 1;
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/include/exec/cpu-common.h b/include/exec/cpu-common.h
index 638dc806a5..c3ab34e6b5 100644
--- a/include/exec/cpu-common.h
+++ b/include/exec/cpu-common.h
@@ -227,6 +227,8 @@ G_NORETURN void cpu_loop_exit_restore(CPUState *cpu, uintptr_t pc);
 /* accel/tcg/cpu-exec.c */
 int cpu_exec(CPUState *cpu);
 
+int cpu_prefetch_tb(CPUState *cpu, vaddr pc);
+
 /**
  * env_archcpu(env)
  * @env: The architecture environment
diff --git a/include/qemu/qemu-plugin.h b/include/qemu/qemu-plugin.h
index 622c9a0232..7933a456da 100644
--- a/include/qemu/qemu-plugin.h
+++ b/include/qemu/qemu-plugin.h
@@ -70,6 +70,7 @@ typedef uint64_t qemu_plugin_id_t;
 extern QEMU_PLUGIN_EXPORT int qemu_plugin_version;
 
 #define QEMU_PLUGIN_VERSION 4
+#define QEMU_PLUGIN_MAE_EXTENSIONS
 
 /**
  * struct qemu_info_t - system information for plugins
@@ -100,6 +101,16 @@ typedef struct qemu_info_t {
     };
 } qemu_info_t;
 
+#ifdef QEMU_PLUGIN_MAE_EXTENSIONS
+/**
+ * qemu_plugin_prefetch() - Pretranslate instructions
+ * @id: this plugin's opaque ID
+ * @vaddr: virtual address to prefetch
+ */
+QEMU_PLUGIN_EXPORT int qemu_plugin_prefetch(qemu_plugin_id_t id,
+                                            uint64_t vaddr);
+#endif
+
 /**
  * qemu_plugin_install() - Install a plugin
  * @id: this plugin's opaque ID
diff --git a/plugins/api.c b/plugins/api.c
index 24ea64e2de..30f66dd0dc 100644
--- a/plugins/api.c
+++ b/plugins/api.c
@@ -58,6 +58,8 @@
 #include "loader.h"
 #endif
 #endif
+#include "exec/cpu-common.h"
+
 
 /* Uninstall and Reset handlers */
 
@@ -71,6 +73,11 @@ void qemu_plugin_reset(qemu_plugin_id_t id, qemu_plugin_simple_cb_t cb)
     plugin_reset_uninstall(id, cb, true);
 }
 
+int qemu_plugin_prefetch(qemu_plugin_id_t id, uint64_t guest_addr)
+{
+    return cpu_prefetch_tb(current_cpu, guest_addr);
+}
+
 /*
  * Plugin Register Functions
  *
diff --git a/plugins/qemu-plugins.symbols b/plugins/qemu-plugins.symbols
index 032661f9ea..b9d77e130e 100644
--- a/plugins/qemu-plugins.symbols
+++ b/plugins/qemu-plugins.symbols
@@ -1,4 +1,5 @@
 {
+  qemu_plugin_prefetch;
   qemu_plugin_bool_parse;
   qemu_plugin_end_code;
   qemu_plugin_entry_code;
-- 
2.47.0

